{"name":"Chronos","tagline":"Fault tolerant job scheduler that handles dependencies and iso8601 based schedules.","body":"# Chronos\r\n\r\nChronos is AirBnB's replacement for `cron`.\r\nIt is a distributed and fault-tolerant scheduler which runs on top of [mesos][mesos]. It's a framework and supports custom\r\n[mesos][mesos] executors as well as the default command executor. Thus by default, chronos executes SH (on most systems BASH) scripts.\r\nChronos can be used to interact with systems such as Hadoop (incl. EMR), even if the mesos slaves on which execution happens\r\ndo not have Hadoop installed. Included wrapper scripts allow transfering files and executing them on a remote machine in the background\r\nand using asynchroneous callbacks to notify chronos of job completion or failures. \r\n\r\nChronos has a number of advantages over regular cron.\r\nIt allows you to schedule your jobs using [ISO8601][ISO8601] repeating interval notation, which enables more flexibility in job scheduling.\r\nChronos also supports the definition of jobs triggered by the completion of other jobs. It supports arbitrarily long dependency chains.\r\n\r\n* <a href=\"#Quick Start\">Quick Start</a>\r\n* <a href=\"#License\">License</a>\r\n* <a href=\"#Contributors\">Contributors</a>\r\n* <a href=\"#GUI\">GUI</a>\r\n* <a href=\"#API\">API</a>\r\n  - <a href=\"#Leaders\">Leaders</a>\r\n  - <a href=\"#Listing Jobs\">Listing Jobs</a>\r\n  - <a href=\"#Deleting a Job\">Deleting a Job</a>\r\n  - <a href=\"#Deleting All Jobs\">Deleting All Jobs</a>\r\n  - <a href=\"#Manually Starting a Job\">Manually Starting a Job</a>\r\n  - <a href=\"#Adding a Scheduled Job\">Adding a Scheduled Job</a>\r\n  - <a href=\"#Adding a Dependent Job\">Adding a Dependent Job</a>\r\n  - <a href=\"#Describing the Dependency Graph\">Describing the Dependency Graph</a>\r\n  - <a href=\"#Asynchronous Jobs\">Asynchronous Jobs</a>\r\n  - <a href=\"#Obtaining Remote Executables\">Obtaining Remote Executables</a>\r\n* <a href=\"#Debugging Chronos Jobs\">Debugging Chronos Jobs</a>\r\n* <a href=\"#Notes\">Notes</a>\r\n* <a href=\"#Notes\">Appendix</a>\r\n  - <a href=\"#Finding a Node to Talk to\">Finding a Node to Talk to</a>\r\n  - <a href=\"#Zookeeper\">Zookeeper</a>\r\n\r\n\r\n## Quick Start\r\n\r\nThere is a file called 'installer.bash' that can be found in the bin directory of the repo. It will compile and install mesos and Chronos.\r\nAfter successful installation a local version of Chronos with a built-in ZK server is started. You will need Maven 3.X, a JDK and build tools to get up and running.\r\nThis is how you run this installer:\r\n\r\n\r\n    $./bin/installer.bash\r\n\r\n\r\nIf you get an error while compiling [][mesos], please consult the [FAQ](https://github.com/airbnb/chronos/blob/master/docs/FAQ.md).\r\n\r\n## License\r\n\r\nThe use and distribution terms for this software are covered by the\r\nApache 2.0 License (http://www.apache.org/licenses/LICENSE-2.0.html)\r\nwhich can be found in the file LICENSE at the root of this distribution.\r\nBy using this software in any fashion, you are agreeing to be bound by\r\nthe terms of this license.\r\nYou must not remove this notice, or any other, from this software.\r\n\r\n## Contributors\r\n\r\n* Florian Leibert ([@flo](http://twitter.com/flo))\r\n* Andy Kramolisch ([@andykram](https://github.com/andykram))\r\n* Harry Shoff ([@hshoff](https://github.com/hshoff))\r\n\r\n## UI\r\n\r\nChronos comes with a UI which can be used to add, delete, list, modify and run jobs. It can also show a graph of job dependencies.\r\n\r\n![Chronos UI screenshot](https://raw.github.com/airbnb/chronos/master/docs/chronos_ui-1.png \"Image call example\")\r\n\r\n## API\r\n\r\nYou can communicate with Chronos using a RESTful [JSON][] API over HTTP.\r\nChronos nodes usually listen on `port 4400` for API requests.\r\nAll examples in this section assume that you've found a running leader at `chronos-leader.airbnb.com:4400`.\r\n\r\n### Leaders\r\n\r\nWhen you have multiple Chronos nodes running, only one of them will be elected as the leader.\r\nThe leader is the only node that responds to API requests, but if you attempt to talk to a non-leader your request will automatically be redirected to a leader.\r\n\r\n### Listing Jobs\r\n\r\n* Endpoint: __/scheduler/jobs__\r\n* Method: __GET__\r\n* Example: `curl curl -L -X GET chronos-node:4400/scheduler/jobs`\r\n* Response: JSON data\r\n\r\nA job listing returns a JSON list containing all of the jobs.\r\nEach job is a JSON hash.\r\nInteresting fields in the hashes are:\r\n\r\n* `invocationCount`: the number of times the job completed\r\n* `executor`: auto-determined by chronos, but will usually be \"\" for non-async jobs\r\n* `parents`: for dependent jobs, a list of all other jobs that must run before this job will do so\r\n\r\nIf there is a `parents` field there will be no `schedule` field and vice-versa.\r\n\r\n### Deleting a Job\r\n\r\nGet a job name from the job listing above. Then:\r\n\r\n* Endpoint: __/scheduler/job/jobName__\r\n* Method: __DELETE__\r\n* Example: `curl -L -X DELETE chronos-node:4400/scheduler/job/request_event_counter_hourly`\r\n* Response: HTTP 204\r\n\r\n### Deleting All Jobs\r\n\r\nNote: *don't do this*.\r\n\r\n* Endpoint: __/scheduler/jobs__\r\n* Method: __DELETE__\r\n* Example: `curl -L -X DELETE chronos-node:4400/scheduler/jobs`\r\n* Response: HTTP 204\r\n\r\n### Manually Starting a Job\r\n\r\nYou can manually start a job by issuing an HTTP request.\r\n\r\n* Endpoint: __/scheduler/job__\r\n* Method: __PUT__\r\n* Example: `curl -L chronos-node:4400/scheduler/job/request_event_counter_hourly`\r\n* Response: HTTP 204\r\n\r\n### Adding a Scheduled Job\r\n\r\nThe heart of job scheduling is a JSON POST request.\r\nThe JSON hash you send to Chronos should contain the following fields:\r\n* Name: the name the job will be known by\r\n* Command: the actual command that will be executed by Chronos\r\n* Schedule: The scheduling for the job, in ISO8601 format. Consists of 3 parts separated by '/':\r\n    * Number of times to repeat the job; put just 'R' to repeat forever\r\n    * The start time of the job\r\n    * The run interval\r\n* Epsilon: If Chronos misses the scheduled run time for any reason, it will still run the job if the time is within this interval.\r\n* Owner: the email address of the person responsible for the job\r\n* Async: whether the job runs in the background\r\n\r\nHere is an example job hash:\r\n```json\r\n{\r\n  \"schedule\":\"R10/2012-10-01T05:52:00Z/PT2S\",\r\n  \"name\":\"SAMPLE_JOB1\",\r\n  \"epsilon\":\"PT15M\",\r\n  \"command\":\"echo 'FOO' >> /tmp/s99\",\r\n  \"owner\":\"bob@airbnb.com\",\"async\":false\r\n}\r\n```\r\n\r\nOnce you've generated the hash, send it to Chronos like so:\r\n\r\n* Endpoint: __/scheduler/iso8601__\r\n* Method: POST\r\n* Example:\r\n```bash\r\n     curl -L -H 'Content-Type: application/json' -X POST -H 'Content-Type: application/json' -d '{json hash}' chronos-node:4400/scheduler/iso8601\r\n```\r\n* Response: HTTP 204\r\n\r\n### Adding a Dependent Job\r\n\r\nA dependent job takes the same JSON format as a scheduled job.\r\nHowever, instead of the `schedule` field, it will accept a `parents` field.\r\nThis should be a JSON list of all jobs which must run at least once before this job will run.\r\n\r\n* Endpoint: __/scheduler/dependency__\r\n* Method: __POST__\r\n* Example:\r\n```bash\r\n    curl -L -X POST -H 'Content-Type: application/json' -d '{dependent hash}' chronos-node:4400/scheduler/iso8601\r\n```\r\n\r\n### Describing the Dependency Graph\r\n\r\nChronos allows to describe the dependency graph and has an endpoint to return this graph in form of a dotfile.\r\n\r\n* Endpoint: __/scheduler/graph/dot__\r\n* Method: GET\r\n* Example:\r\n```bash\r\n    curl -L -X GET chronos-node:4400/scheduler/graph/dot\r\n```\r\n\r\n### Asynchronous Jobs\r\n\r\nIf your job is long-running, you may want to run it asynchronously.\r\nIn this case, you need to do two things:\r\n\r\n1: When adding your job, add `#async` to the name\r\n2: Add an `executor` field to your job hash and set it to `/srv/mesos/utils/async-executor.arx`\r\n3: Your job when complete should report it's completion status to Chronos.\r\n\r\nIf you forget to do (2), your job will never run again because Chronos will think that it is still running.\r\nReporting job completion to Chronos is done via another API call:\r\n\r\n* Endpoint: __/scheduler/task/*task id*__\r\n* Method: __PUT__\r\n* Example:\r\n```bash\r\n    curl -X PUT -H \"Content-Type: application/json\" -d '{\"statusCode\":0}' chronos-leader:4400/scheduler/task/my_job_run_555_882083xkj302\r\n```\r\n\r\nThe task id is auto-generated by chronos.\r\nIt will be available in your job's environment as `$mesos_task_id`.\r\nNote: you may need to url-encode the mesos task id in order to submit it as part of the URL.\r\n\r\n### Obtaining Remote Executables\r\n\r\nWhen specifying the `command` field in your job hash, use the `url-runner.bash` (make sure it's deployed on all slaves). Alternatively,\r\nyou can also use a url in the command field, if your mesos was compiled with cURL libraries.\r\n\r\n## Debugging Chronos Jobs\r\n\r\nChronos itself can be configured just like [dropwizard-logging][logging] via the configuration file. If there's something going wrong with the framework itself look here for information. Individual jobs log with their task id on the mesos slaves.\r\nLook in the standard out log for your job name and the string \"ready for launch\", or else \"job ct:\" and your job name.\r\nThe job is done when the line in the log says:\r\n\r\n    Task with id 'value: TASK_ID **FINISHED**\r\n\r\nTo find debug logs on the mesos slave, look in `/tmp/mesos/slaves` on the slave instance (unless you've specifically supplied a different log folder for mesos). For example:\r\n\r\n    /tmp/mesos/slaves/\r\n\r\nIn that dir, the current slave run is timestamped so look for the most recent.\r\nUnder that is a list of frameworks; you're interested in the chronos framework.\r\nFor example:\r\n\r\n    /tmp/mesos/slaves/STAMP/frameworks/\r\n\r\n## Notes\r\n\r\nThe curl executor is even more powerful if the specified URLs are packaged and self-contained executables.\r\nThis can be done for example via arx, which bundles code [][arx].\r\nArx applications in turn contain shell commands and an archive (e.g. a jar file and a startup-script).\r\nIt's easy to use and there are no libraries required to unpack and execute the archive.\r\n\r\nSigned URLs can be used to publish arx files (e.g. on s3).\r\n\r\nTo start a new scheduler you have to give the JVM access to the native mesos library.\r\nYou can do so by either setting the `java.library.path` to the build mesos library or create an environment variable `MESOS_NATIVE_LIBRARY` and set it to the `mesoslib.dylib` / `mesoslib.so` file\r\n\r\nAlso, you have to set `MESOS_LAUNCHER_DIR` to the src of the build of mesos such that the shell executor can be found (e.g. `/Users/florian/airbnb_code/mesos/build/src`).\r\n\r\nAlso set `MESOS_KILLTREE` to the location of the killtree.sh script - `/Users/florian/airbnb_code/mesos/src/scripts/killtree.sh`\r\n\r\nIf you're using the installer script this should be setup for you.\r\n\r\n## Appendix\r\n\r\n### Finding a Node to Talk to\r\n\r\nAs we mentioned, Chronos is designed (not required) to run with multiple nodes of which one is elected master.\r\nIf you use the cURL command line tool, you can use the \"-L\" flag and hit any chronos node and you will get a\r\n307 REDIRECT to the leader.\r\n\r\n### Zookeeper\r\n\r\nChronos registers itself with [][Zookeeper] at the location `/airbnb/service/chronos`. This value can be changed via the configuration file.\r\n\r\n\r\n[arx]: https://github.com/solidsnack/arx\r\n[ISO8601]: http://en.wikipedia.org/wiki/ISO_8601 \"ISO8601 Standard\"\r\n[json]: http://www.json.org/\r\n[mesos]: http://incubator.apache.org/mesos/ \"Apache Mesos\"\r\n[logging]: http://dropwizard.codahale.com/manual/core/#logging\r\n[Zookeeper]: http://zookeeper.apache.org/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}